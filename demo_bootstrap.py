from __future__ import division
import numpy as np
import statsmodels.stats.proportion
import time

def bootstrap_rejection_sampling_confidence_interval(p_hat, T, N, alpha=.05):
    '''
    Inputs:
    - p_hat: (float) estimate of p
    - T:(int) # of samples used to compute p_hat
    - N:(int) # of simulations to perform for bootstrap estimate
    - alpha: (float) confidence interval holds with probability (1 - alpha)    
    '''
    bootstrap_samples = np.sum(np.random.binomial(n=1, p=p_hat, size=(N,T)), axis = 1)/T

    percentiles = np.percentile(bootstrap_samples, [100*alpha/2, 100 - 100*alpha/2])
    lower_bound = percentiles[0]
    upper_bound = percentiles[1]
    return lower_bound, upper_bound

def bootstrap_adaptive_rejecting_sampling_confidence_interval(Z_hat, Z_UBs, N, alpha=.05):
    '''
    Inputs:
    - Z_hat: (float) estimate of the partition function, used for bootstrapping
    - Z_UBs: (np.array of length T) The upper bounds on the partition function
        used to get T samples (including accepted and rejected samples)
    - N:(int) # of simulations to perform for bootstrap estimate
    - alpha: (float) confidence interval holds with probability (1 - alpha)

    Outputs:
    - lower_bound: (float) lower bound on Z, holding with probability (1 - alpha)
    - upper_bound: (float) upper bound on Z, holding with probability (1 - alpha)

    *note if we were to repeat the experiment, the true value of Z would fall within
    our bounds with probability (1-alpha)
    '''
    inverse_UBs = 1/Z_UBs
    bootstrap_probs = Z_hat*inverse_UBs
    assert(len(Z_UBs.shape) == 1)
    T = Z_UBs.shape[0]
    bootstrapped_accepted_sample_counts = np.sum(np.random.binomial(n=1, p=bootstrap_probs, size=(N,T)), axis = 1)
    bootstrapped_Z_estimates = bootstrapped_accepted_sample_counts/np.sum(inverse_UBs)

    percentiles = np.percentile(bootstrapped_Z_estimates, [100*alpha/2, 100 - 100*alpha/2])
    lower_bound = percentiles[0]
    upper_bound = percentiles[1]
    return lower_bound, upper_bound


all_upper_bounds = [145610703178.01276, 113607870289.94089, 107849272336.55531, 102245397391.70213, 91204498213.21371, 90133577881.1669, 86983260917.14226, 86246429639.52197, 84725145036.76357, 82123792192.79012, 81180341144.11375, 80130070188.06522, 78922748838.12094, 77802993506.56584, 76487379550.07504, 73827068076.70137, 73583276257.11221, 72157649848.89337, 70881058466.91034, 70588972453.15213, 70257577797.64505, 70140945124.65392, 70071787558.87608, 69297588478.23364, 69089603762.79738, 68598627582.954544, 68398013221.76422, 68116276282.76658, 67499067284.42909, 67460161194.07451, 67418229825.28419, 67380004785.648895, 67286843119.74863, 67154330226.774185, 66918615161.359634, 65411323843.32224, 65070079601.37082, 64662214664.9055, 64607977384.53712, 64435523412.5925, 63814200090.98671, 63793069921.07987, 63762710092.5, 63587408351.02603, 63552713078.07703, 63381881744.50791, 63354935140.35595, 63065289627.23514, 62469941408.21029, 62402953186.949875, 61882412032.82237, 61575549477.527504, 61519566661.07632, 61072781879.266426, 60885132685.77205, 60268996567.29694, 60241110995.93443, 60189988205.13881, 60011531815.09153, 59646230186.59057, 59407896968.43454, 59276627635.31475, 59276375270.084206, 59169944262.059074, 59071622469.08041, 59067532894.73741, 58585126487.124794, 58457412137.39348, 58456836748.410225, 58411306676.05621, 58185331173.4172, 58087787619.616776, 58027452521.58888, 57997970704.04711, 57988029773.662186, 57873685074.44114, 57796532718.92468, 57515806920.547356, 57405538646.89357, 57405422361.36195, 57356614698.565216, 57355837830.53682, 57155919418.4632, 57128911149.96114, 57014566450.7401, 56477247402.649445, 56436410679.87057, 56278712002.94145, 56054469479.326004, 56039337944.690445, 56013977626.49634, 55986742611.4323, 55976036954.709785, 55902059724.86861, 55740288987.584915, 55615975016.10205, 55548986794.84163, 55506980173.26637, 55251667047.79914, 55216835975.47229, 55173921665.37875, 55092836426.06683, 55081459617.93941, 55012037345.27598, 54849285781.582016, 54802940950.45015, 54776369609.244225, 54554256467.579895, 54547384492.600525, 54475157911.46463, 54369146776.85972, 54355225919.72059, 54288294678.09104, 54210863541.78063, 54210514435.903725, 54202662349.69911, 54169273584.457214, 54151230349.30938, 54150615864.59964, 54039630237.90736, 54011414436.48627, 53718504719.800804, 53477903486.15261, 53464060389.44055, 53369090887.684, 53341733855.001274, 53258772784.48784, 53255287857.22774, 53167148298.31164, 53148035003.48075, 53100892904.66358, 52918256292.94951, 52882521518.839134, 52867072235.51931, 52793722286.053925, 52788433759.251625, 52690545461.77922, 52687469803.7587, 52655902345.96251, 52488133841.63867, 52441787635.74334, 52418866580.69318, 52343201405.88209, 52123081968.59955, 52026226363.049126, 51859949079.31422, 51823579512.61232, 51806847793.00313, 51661187979.48141, 51608023695.40237, 51538323822.47305, 51500942319.21103, 51482682910.70514, 51403133825.841255, 51352109248.27481, 51317652329.958466, 51269644183.584946, 51266114407.84211, 51154364986.09688, 51080467420.21074, 51079830890.28467, 51069596426.717285, 51022592477.44578, 51014327214.99252, 50866855263.8025, 50768631911.95967, 50660731690.900894, 50614843311.13809, 50507007915.32142, 50387074823.98289, 50377480183.01531, 50345257152.25747, 50302839306.983215, 50283385194.24763, 50128431662.369286, 50124040808.97825, 50061083758.51152, 49988784212.424576, 49861999787.45055, 49760537157.02112, 49743714299.00669, 49722254194.10427, 49594246927.76674, 49556762892.671135, 49519613441.839905, 49466263563.818474, 49399990334.44266, 49382135095.95136, 49376432916.65106, 49341682146.6885, 49310127204.20693, 49301008896.0242, 49279033863.39389, 49251512764.52301, 49232619240.631874, 49168580007.962654, 49160698997.474335, 49122479120.41282, 49068907926.72752, 49017883349.16108, 49005851347.70817, 48542140469.389824, 48527788354.51632, 48487363676.085144, 48445842974.956955, 48442526303.55259, 48394605505.66663, 48374346500.95903, 48346720064.96312, 48302693100.13381, 48290121259.37751, 48251006043.76339, 48229493780.33132, 48228317650.52104, 48198252621.78669, 48149122419.64305, 48147536766.696556, 48136002465.84867, 48027663807.90102, 48000002818.13348, 47933014596.87306, 47859435324.605064, 47720592253.21974, 47672469895.409584, 47656089592.18066, 47603701389.255424, 47568476334.349625, 47562868874.097176, 47555022371.293976, 47533021190.3653, 47523137404.97328, 47468876738.35044, 47396769628.162476, 47345871273.02836, 47314814337.07179, 47302456853.09808, 47261752340.957146, 47203622344.66168, 47130732649.008125, 47103591904.926605, 47059355345.04784, 47055799920.04901, 47016067631.01476, 46999311392.40241, 46731276753.67507, 46723321800.14904, 46722773505.50208, 46665386994.06607, 46623225290.69474, 46611062325.60929, 46524129861.41439, 46506196202.97693, 46504930066.99571, 46397071737.02081, 46337268463.83807, 46256563132.82972, 46171512009.05741, 46133366511.55317, 46125998331.32482, 45971932204.74926, 45966656076.22451, 45919845104.220245, 45901579842.83537, 45854105263.37282, 45781543009.34148, 45687265948.24486, 45680416173.0399, 45678341704.99057, 45673203329.66826, 45661337192.46126, 45625106324.726746, 45619510259.634514, 45551296610.525475, 45548925216.25834, 45537673575.47859, 45450334762.071655, 45449042891.80576, 45444594485.89919, 45434755474.15286, 45363309528.783005, 45353675050.38072, 45334866673.9797, 45315235502.20252, 45309477102.37422, 45306324796.37109, 45170524416.35391, 45148166522.418396, 45140427583.987656, 45106374227.482544, 45003948939.57679, 44977937472.48004, 44909114594.1278, 44882864434.02678, 44869949751.45416, 44857101318.64255, 44836455140.362976, 44793982115.12052, 44780407931.53535, 44750523767.49347, 44741706640.99416, 44711962050.59187, 44700439144.36824, 44568813786.080414, 44552033023.61211, 44549998349.72507, 44519040589.06808, 44471604038.26907, 44418557000.25955, 44411734219.07442, 44386680103.93914, 44374806284.26454, 44371483549.73532, 44330642739.28884, 44307898729.72197, 44291256860.78497, 44245385427.224754, 44237799299.00248, 44230132677.19106, 44186200731.1036, 44180121730.80566, 44159060384.18865, 44134546392.89224, 44131510253.20982, 44056490103.16143, 44044312330.30948, 44039412712.47966, 43980502486.55881, 43961518249.03763, 43866870627.3085, 43866419187.281006, 43856254426.80051, 43851880675.67874, 43823384495.59682, 43809428275.133606, 43662998865.68568, 43598207850.98568, 43584246145.74862, 43561385178.36385, 43533361139.492134, 43475770488.27734, 43426013476.90868, 43418158416.58624, 43389575565.18906, 43363890853.15638, 43338376739.70378, 43303190653.34762, 43270412271.332054, 43256523936.13893, 43234575642.58, 43231398408.10222, 43227556248.89202, 43178949283.12335, 43169831726.84971, 43163027479.901146, 43162295311.438995, 43147196038.47573, 43122819523.353584, 43110032147.6133, 43104355175.45166, 43100284476.77468, 43095709041.621506, 43084724311.58274, 43079133805.81741, 43069183843.38828, 43061579516.50857, 43041614418.3698, 43030546137.97004, 42992042160.41161, 42970564735.02229, 42947010072.657616, 42928208910.50396, 42917651524.969925, 42895484408.26479, 42856409896.29549, 42854801699.707664, 42843363163.68053, 42812064454.58034, 42793987102.00558, 42784702896.10636, 42777797349.211044, 42742457769.28049, 42737466267.46881, 42727622481.963135, 42709775790.34712, 42671511489.635315, 42665160775.40918, 42485413734.42997, 42472942916.61504, 42454908593.76681, 42431270508.95151, 42419215648.06663, 42409725775.444626, 42408589604.98877, 42389545781.844536, 42347184956.33502, 42314542403.69736, 42305721618.19204, 42297695360.65331, 42269677861.79431]
all_upper_bounds = np.array(all_upper_bounds)
Z_hat = 10/np.sum(1/all_upper_bounds)

if __name__ == "__main__":
    for N in [10, 100, 1000, 10000, 100000, 1000000, 10000000]:
        t0 = time.time()
        print "%d bootstrap simulations" % N, bootstrap_adaptive_rejecting_sampling_confidence_interval(Z_hat=Z_hat, Z_UBs=all_upper_bounds, N=N, alpha=.05)
        t1 = time.time()
        print 'time =', t1-t0
        print

    num_gumbel_samples = 100
    p=.11
    print 'clopper pearson interval', statsmodels.stats.proportion.proportion_confint(count=num_gumbel_samples, nobs=num_gumbel_samples/p, alpha=0.05, method='beta')

    Z_UBs = np.ones(int(np.floor(num_gumbel_samples/p)))
    lb, ub = bootstrap_adaptive_rejecting_sampling_confidence_interval(Z_hat=p, Z_UBs=Z_UBs, N=10000, alpha=.05)
    print 'bootstrap adaptive interval', lb, ub

    lb, ub = bootstrap_rejection_sampling_confidence_interval(p_hat=p, T=int(np.floor(num_gumbel_samples/p)), N=10000, alpha=.05)
    print ' bootstrap fixed p interval', lb, ub

